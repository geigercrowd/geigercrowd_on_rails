class DataSource < ActiveRecord::Base
  has_many :locations
  belongs_to :instrument
  serialize :options, Hash
  validates_uniqueness_of :short_name, case_sensitive: false
  
  
  # Runs the Scraper and fetches new samples
  def fetch
    return false if self.fetched_at and Time.now - self.fetched_at <= self.update_interval
    self.options[:urls].each do |url|
      data = self.parser_class.constantize.new(url).parse
  
      data.each do |d|
        location = Location.where(:name => d.location_name, :data_source_id => self.id).first
        unless location
          # Assign a new location
          location = Location.new(:name => d.location_name, :data_source_id => self.id)
          location.save(:validate => false)
        end
        
        unless self.instrument
          # Assign a new instrument
          self.instrument = Instrument.new(:notes => "Autogenerated", :location_id => location.id)
          self.instrument.data_type = DataType.where(:name => d.value_type).first || DataType.create!(:name => d.value_type)
          self.instrument.save(:validate => false)
        end
        
        # Skip if no value was parsed
        next if d.value.nil?
        
        # Skip if we already have a sample for this location, instrument and time
        last_sample = Sample.where(:location_id => location.id, :instrument_id => self.instrument.id).last
        next if last_sample and last_sample.timestamp == d.date_time
        
        # Create the sample
        logger.debug("Before create")
        sample = Sample.new(:value => d.value, :location_id => location.id, :instrument_id => self.instrument.id, :timestamp => d.date_time)
        sample.save(:validate => false)
      end
    end
    self.fetched_at = Time.now
    self.save!

    return true    

  end
  
end
